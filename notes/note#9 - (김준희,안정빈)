텍스트 파일과 바이너리 파일에 대한 이해
-> 텍스트 파일: 사람들이 사용하는 글자 혹은 문자들로만 구성되는 파일
   바이너리 파일: 문자로 표현되지 않는 바이너리 데이터가 기록된 파일
   우리가 사용하는 한글 파일은 바이너리 파일이다.

파일 입출력에 대한 이해
ifstream : 파일 읽기시에 사용되는 라이브러리이다.
ofstream : 파일 쓰기시에 사용되는 라이브러리이다.
fstream : 하나의 파일에 대해 읽기와 쓰기를 동시에 할 때 사용되는 라이브러리이다.

-> 파일 입출력 스트림은 파일을 프로그램과 연결한다

파일 입출력 모드 텍스트I/O와 바이너리 I/O에 대한 이해

텍스트 I/O
-> 문자 단위로 파일에 쓰기, 파일에서 읽기
   문자를 기록하고, 읽은 바이트를 문자로 해석
   텍스트 파일에만 적용이 된다

바이너리 I/O
-> 바이트 단위로 파일에 쓰기, 파일에서 읽기
   데이터를 문자로 해석하지 않고 있는 그대로 기록하거나 읽는다
   텍스트 파일과 바이널 파일 모두 입출력이 가능하다

예제 12-1 코드 작성 (김준희 작성)

1. 라이브러리를 적절하게 선언함
2. 키보드로 부터 입력을 받게 코든를 잘 작성함
3. 파일은 여는 코드 작성 과정중 살짝 버벅임
4. 코드가 잘 실행됨

파일 모드에 대한 이해
-> 파일모드 : 파일 입출력에 대한 구체적인 작업 형태에 대한 지정
   파일모드 지정:     open  ("파일이름",파일모드)
                 ifstream  ("파일이름",파일모드)
                 ofstream  ("파일이름",파일모드)

예제 12-3 코드 작성 (안정빈 작성)

1. 라이브러리를 적절하게 선언함
2. 파일에서 문자를 읽는 코드 작성시 버벅임
3. 코드가 잘 실행됨


바이너리 I/O에 대한 이해
-> 바이너리 I/O방식 : 데이터의 바이너리 값을 그대로 파일에 저장하거나, 파일의 바이너리 값을 그대로 읽어서 변수나 버퍼에 저장하는 방식
                     텍스트 파일이든 바이너리 파일이든 바이너리 I/O로 입출력이 가능하다.

오류에 대한 이해
오류는 컴파일 오류와 실행 오류로 나뉜다
-> 컴파일 오류: 문법에 맞지 않는 구문으로 인한 오류
     실행 오류: 개발자의 논리 오류, 실행 오류의 결과

C++ 예외 처리에 대한 이해
-> try-throw-catch
   try{}블록 : 예외가 발생할 가능성이 있는 코드를 묶음
   throw{}블록 : 발견된 예외를 처리하기 위해, 예외 발생을 알리는 문장
   catch{}블록 : throw에 의해 발생한 예외를 처리하는 코드

예제 13-4 코드작성 (김준희 작성)

1. 합과 인원수를 입력받게 코드를 잘 작성함
2. try, catch 블록을 사용해 코드를 잘 작성함
3. 코드가 잘 실행됨

throw 사용 시 주의사항
1. throw문의 위치는 항상 try{}블록 안에서 실행 되어야 한다.
2. 예외를 처리할 catch()가 없으면 프로그램이 강제 종료된다.
3. catch() {} 블록 내에서도 try {} catch() {} 블록 선언이 가능하다.

바이너리 I/O로 파일 복사 과정에 대해 생각해보는 과정(예제 12-7코드)
-> 소스 파일에서 목적 파일로 복사하는 과정
get(),put()함수를 이용하여 c:\temp에 있는 desert.jpg를 c:\temp\copydesert.jpg로 복사해야 한다.
* 예제 실행 전에 desert.jpg를 미리 c:\temp에 복사해두어야 한다.
