p.7 상속 관계로 클래스의 간결화 사례

김준희 Q: 각각 다른 클래스에 공통된 기능이 있어 상속하여 나눌 수 있지 않을까?
안정빈 A: 말하기, 먹기, 걷기, 잠자기 4개의 기능이 클래스에 공통되어 있어 이 기능들을 가진 클래스를 만들어 상속받으면 된다.

안정빈 Q: 나머지 기능들은 어떻게 하면 좋을까?
김준희 A: 공부하기 기능이 중복된 클래스들중 일하기 기능을 가진 클래스가 공부하기 기능을 가진 클래스를 상속받게 하고
          연구하기 기능이 중복된 클래스들중 가르치기 기능을 가진 클래스가 연구하기 기능을 가진 클래스를 상속받게 만들면 된다.


업 캐스팅에 대해 이해하는 과정

업 캐스팅이란? -> 파생 클래스 포인터가 기본 클래스 포인터에 치환되는 것이다.
                 
ex)
   ColorPoint Cp;
   ColorPoint *pDer;
   Point *pBase = &cp; // 업 캐스팅


다운 캐스팅에 대해 이해하는 과정

다운 캐스팅이란? -> 기본 클래스의 포인터가 파생 클래스의 포인터에 치환되는 것이다.

ex)
   ColorPoint Cp;
   ColorPoint *pDer;
   Point *pBase = &cp;

   pDer = (ColorPoint *)pBase; // 다운캐스팅
              

접근 지정자를 이해하는 과정

안정빈 Q: 접근 지정자의 종류는 무엇이 있는가?
김준희 A: private, public, protected 멤버들이 있다.

김준희 Q: 이들의 차이점은 무엇인가?
안정빈 A: private 멤버는 선언된 클래스 내에서만 접근이 가능하다.
          public 멤버는 선언된 클래스나 외부 어떤 클래스,모든 외부 함수에 접근이 가능하다.
          protected 멤버는 선언된 클래스 에서만 접근이 가능하다.

안정빈 Q: 파생 클래스에서도 적용이 되는가?
김준희 A: private 멤버는 파생클래스 에서도 기본 클래스의 private멤버에 직접 접근이 불가하다.
         public 멤버는 기본 클래스의 public 멤버에 접근이 가능하다.
         protected 멤버는 파생 클래스에서만 접근이 가능하다.


기본 클래스, 파생 클래스 의 생성자 호출을 이해하는 과정

기본 클래스에 기본 생성자가 있는 경우
-> 컴파일러는 묵시적으로 기본 클래스의 기본 생성자를 호출하게 한다.

기본 클래스에 기본 생성자가 없는 경우 
-> 컴파일러가 짝을 찾을 수 없으므로 컴파일 오류가 발생한다.

파생 클래스의 매개 변수를 가진 생성자가 기본 클래스에 있는 경우
-> 컴파일러는 묵시적으로 기본 클래스의 기본 생성자를 호출하게 한다.

상속 지정을 이해하는 과정

김준희 Q: 상속을 선언할 때에도 접근 지정자를 지정하는데 각각의 멤버들은 기본 클래스의 멤버의 접근 속성을 어떻게 계승하는가?
안정빈 A:  public 멤버는 기본 클래스의 protected, public 멤버 속성을 그대로 계승한다.
           private 멤버는 기본 클래스의 protected, public 멤버를 private으로 계승한다.
           protected 멤버는 기본 클래스의 protected, public 멤버를 protected로 계승한다.
