템플릿 키워드를 이해하는 과정

템플릿은 함수나 클래스를 일반화하는 도구이다.
템플릿 키워드는 변수나 매개변수의 타입만 다르고, 코드 부분이 동일한 함수를 일반화 시킨다.

ex)

void myswap(int & a, int & b) {                          
double tmp;                                                            
tmp = a;                                                  
a = b;                                                   
b = tmp;                                                  template <class T>
}                                                         void myswap (T & a, T & b) { 
                                                          T tmp;
                                        ------>           tmp = a;
void myswap (double & a, double & b) {                    a = b;
int tmp;                                                  b = tmp;
tmp = a;                                                  }
a = b;
b = tmp;
}

템플릿으로부터의 구체화
-> 템플릿의 제네릭 타입에 구체적인 타입을 지정하고 템플릿 함수로부터 구체화된 함수의 소스 코드 생성한다.


예제 10-1 코드 작성(김준희 작성)
  
  템플릿 키워드를 구성하는 과정에서 살짝 버벅임
  변수 타입에 따라 구체화를 잘 시킴
  컴파일이 바르게 실행됨

구체화의 오류
-> 두 매개변수의 제네릭 타입을 동일하게 선언해야 한다.

예제 10-3 코드 작성(안정빈 작성)

  템플릿 키워드를 구성하는 과정에서 버벅임
  변수를 적절하게 지정하여 값을 받음
  컴파일이 바르게 실행됨

템플릿 함수와 중복 함수가 같이 작성된 경우
-> 템플릿 함수보다 중복함수가 우선 컴파일 된다.

두개의 제네릭 타입을 가진 클래스
-> 각각의 제네릭 타입에 따라 구현부를 작성한다.

STL을 이해하는 과정

STL은 C++의 표준 라이브러리중 하나로 많은 제네릭 클래스와 제네릭 함수를 포함하고 있다.
STL은 컨테이너,iterator,알고리즘으로 구성되어 있다.

STL 컨테이너의 종류

    컨테이너 클래스                       설명                           헤더 파일
       vector             가변 크기의 배열을 일반화한 클래스              <vector>
       deque                앞뒤 모두 입력 가능한 큐 클래스               <deque>
       list                 빠른 삽입/삭제 가능한 리스트 클래스            <list>
        set           정렬된 순서로 값을 지정하는 집합 클래스,값은 유일      <set>
        map              (key,value) 쌍을 저장하는 맵 클래스               <map>
       stack                     스택을 일반화한 클래스                   <stack>
        que                       큐를 일반화한 클래스                    <queue>

STL iretator의 종류

    iterator의 종류              iterator에 ++ 연산 후 방향              read/write
       iterator                       다음 원소로 전진                   read/write
    const_iterator                    다음 원소로 전진                      read
   reverse_iterator                   지난 원소로 후진                   read/write
 const_reverse_iterator               지난 원소로 후진                      read

  
vector 컨테이너를 이해하는 과정

vector 컨테이너는 가변 길이 배열을 구현한 제네릭 클래스이다.
원소의 저장, 삭제, 검색 등 다양한 멤버 함수를 지원한다.


vector 클래스의 주요 멤버와 연산자


       멤버와 연산자 함수                                  설명
      push_back(element)                      벡터의 마지막에 element 추가
        at(int index)                       index 위치의 원소에 대한 참조 리턴
            begin()                         벡터의 첫 번째 원소에 대한 참조 리턴
             end()                      벡터의 끝(마지막 원소 다음)을 가리키는 참조 리턴
            empty()                              벡터가 비어 있으면 true 리턴
       erase(iterator it)          벡터에서 it이 가리키느느 원소 삭제. 삭제 후 자동으로 벡터 조절
    insert(iterator it,element)                  벡터 내 it 위치에 element 삽입
             size()                            벡터에 들어 있는 원소의 개수 리턴
           operator[]()                         지정된 원소에 대한 참조 리턴
           operator=()                          이 벡터를 다른 벡터에 치환(복사)


예제 10-9 코드 작성(김준희 작성)

  vector 클래스를 잘 선언함
  vector 클래스의 멤버 push_back()을 잘 사용함
  컴파일이 바르게 실행됨


iterator를 이해하는 과정
-> iterator는 반복자로도 부리며 컨테이너의 원소를 가리키는 포인터이다.

iterator 변수 선언
->  vector<int>::iterator it;
    it = v.begin();       ----------> it은 벡터의 첫 번째 원소
여기서 it은 원소가 int 타입인 벡터의 원소에 대한 포인터 이다.


map 컨테이너를 이해하는 과정
-> ('키','값')의 쌍을 원소로 저장하는 제네릭 컨테이너이다.
주로 영한 사전을 구성하는 사용된다.

map 클래스의 주요 멤버와 연산자

     멤버와 연산자 함수                               설명
  
insert(pair<> &element)         맵에 '키'와'값'으로 구성된 pair 객체 element 삽입
     at(key_type& key)                   맵에서'키'값에 해당하는'값' 리턴   
          begin()                       맵의 첫 번째 원소에 대한 참조 리턴
           end()                    맵의 끝(마지막 원소 다음)을 가리키는 참조 리턴
          empty()                           맵이 비어 있으면 true 리턴
    find(key_type& key)          맵에서'키'값에 해당하는 원소를 가리키는 iterator 리턴
     erase(iterator it)                   맵에서 it이 가리키는 원소 삭제
          size()                          맵에 들어 있는 원소의 개수 리턴
  operator[key_type& key]()        맵에서'키'값에 해당하는 원소를 찾아 '값' 리턴
         operator=()                               맵 치환(복사)


auto를 이해하는 과정
-> auto는 컴파일러에게 변수선언문에서 추론하여 타입을 자동 선언하도록 지시하는 키워이다.
   auto를 사용하면 복잡한 변수 선언을 간소화해주고 긴 타입 선언시 오타를 줄여줄 수 있다.


두개의 제네릭 타입을 가진 제네릭 mcopy() 함수에 대해 생각한 점 (예제10-4)

두 배열이 입력받는 타입이 다르므로 템플릿의 제네릭 타입에 두개의 서로 다른 타입(T1,T2)을 선언하였다.
서로 다른 타입에 대해 배열을 복사하는 것이므로, 배열 요소들 하나하나를 복사할 때 형변환을 해주어야 한다.
구체화될 때, 제네릭 타입인 T1과 T2는 main함수에서 호출될때 실인자의 타입으로 각각 구체화되어 컴파일된다.



